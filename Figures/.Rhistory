source ("Functions.r")
?eBayes
1 >= 2
?pnorm
?qt
powerTOST(D, n, alpha)#
{#
x <- rnorm(n)#
y <- rnorm(n, D)#
#
TOST <- abs(X-Y) + qt(1-alpha/2, n-2) < epsilon#
sum(TOST)#
}
powerTOST <- function(D, n, alpha)#
{#
x <- rnorm(n)#
y <- rnorm(n, D)#
#
TOST <- abs(X-Y) + qt(1-alpha/2, n-2) < epsilon#
sum(TOST)#
}
?sample
powerTOST.norm <- function(D, n, alpha, epsilon)#
{#
x <- rnorm(n)#
y <- rnorm(n, D)#
#
TOST <- abs(X-Y) + qt(1-alpha/2, n-2) < epsilon#
sum(TOST)/n#
}#
#
#
powerBoot.norm <- function(D, n, B, alpha, epsilon)#
{#
	x <- rnorm(n)#
	y <- rnorm(n, D)#
	xprime <- x#
	delta <- rep(0,n)#
	for(i in 1:B)#
	{#
		xprime <- sample(x, n, replace = TRUE)#
		delta[i] <- abs(xprime - y)#
	}#
	p <- sum(delta < epsilon)/B	#
}
normTOST <- rep(0, 100)#
for(i in 1:100) normTOST <- powerTOST.norm(0.5, i, 0.05, 1)
powerTOST.norm <- function(D, n, alpha, epsilon)#
{#
x <- rnorm(n)#
y <- rnorm(n, D)#
#
TOST <- abs(x-y) + qt(1-alpha/2, n-2) < epsilon#
sum(TOST)/n#
}#
#
#
powerBoot.norm <- function(D, n, B, alpha, epsilon)#
{#
	x <- rnorm(n)#
	y <- rnorm(n, D)#
	xprime <- x#
	delta <- rep(0,n)#
	for(i in 1:B)#
	{#
		xprime <- sample(x, n, replace = TRUE)#
		delta[i] <- abs(xprime - y)#
	}#
	p <- sum(delta < epsilon)/B	#
}	#
#
normTOST <- rep(0, 100)#
for(i in 1:100) normTOST <- powerTOST.norm(0.5, i, 0.05, 1)
SE
SD
sd
se
sd
powerTOST.norm <- function(D, n, alpha, epsilon)#
{#
x <- rnorm(n)#
y <- rnorm(n, D)#
#
TOST <- abs(mean(x-y) ) + qt(1 - alpha/2, n-2)*sd(x-y) < epsilon#
sum(TOST)/n#
}
x-y
n <- 100#
D <- 0.5#
alpha <- D/10#
epsilon = 1
x <- rnorm(n)#
y <- rnorm(n, D)#
#
TOST <- abs(mean(x-y) ) + qt(1 - alpha/2, n-2)*sd(x-y) < epsilon#
sum(TOST)/n
x <- rnorm(n)
x
y
mean(x-y)
abs(x-y)
qt(1 - alpha/2, n-2)*sd(x-y)
TOST <- abs(x-y) + qt(1 - alpha/2, n-2)*sd(x-y) < epsilon
sum(TOST)/n
abs(x-y) + qt(1 - alpha/2, n-2) < epsilon#
sum(TOST)/n
TOST <- abs(x-y) + qt(1 - alpha/2, n-2) < epsilon#
sum(TOST)/n
qt(1 - alpha/2, n-2)
x <- rnorm(n)#
y <- rnorm(n, D)
x-y
sd(x-y)
?order
	o <- order(abs(xprime - yprime))
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 10000#
k <- 1000#
q <- 250
?floor
x <- rnorm(n)
y <- rnorm(n, D)
xprime <- x
x <- rnorm(n)#
y <- rnorm(n, D)
bootdist <- matrix(NA, B, n)
i <- 1
i <- 1	#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	o[i,] <- order(bootdist[i,])#
	i <- i + 1
o <- bootdist
	i <- 1	#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	o[i,] <- order(bootdist[i,])#
	i <- i + 1
o
o[1,]
B <- 1000
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
while(i in 1:B) #
	{#
	i <- 1	#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	i <- i + 1#
	}
o <- apply(bootdist, 2, order)
o
head(o)
bool <- o[,floor(B*(1-alpha))] < epsilon
floor(B*(1-alpha))
dim(bool)
dim(o
)
bool <- o[ floor(B*(1-alpha)), ] < epsilon
bool
bool <- o[ floor(B*(alpha)), ] < epsilon
bool
powerB <- sum(bool)/n
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
while(i in 1:B) #
	{#
	i <- 1	#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	i <- i + 1#
	}#
o <- apply(bootdist, 2, order)	#
bool <- o[ floor(B*(1-alpha)), ] < epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
while(i in 1:B) #
	{#
	i <- 1	#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	i <- i + 1#
	}#
o <- apply(bootdist, 2, order)	#
bool <- o[ floor(B*(1-alpha)), ] < epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	}#
o <- apply(bootdist, 2, order)	#
bool <- o[ floor(B*(1-alpha)), ] < epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 1000#
k <- 1000#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 1:k)#
{ #
	E[i] <- epsilon + i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, epsilon + i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	}#
o <- apply(bootdist, 2, order)	#
bool <- o[ floor(B*(alpha)), ] < epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 1:k)#
{ #
	E[i] <- epsilon + i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, epsilon + i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	}
?unique
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	}
plot(duplicates(bootdist[,1]), unique(bootdist[,1]))
plot(duplicated(bootdist[,1]), unique(bootdist[,1]))
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	}
dim(bootdist)
plot(duplicated(bootdist[,2]), unique(bootdist[,2]))
unique(bootdist[,2]
)
duplicated(bootdist[,2])
plot(length(bootdist[,2]), bootdist[,2])
plot(1:length(bootdist[,2]), bootdist[,2])
plot(1:length(bootdist[,2]), order(bootdist[,2]))
B <- 10000
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	}
plot(1:length(bootdist[,2]), order(bootdist[,2]))
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	}
o <- apply(bootdist, 2, order)
bool <- o[ floor(B*(alpha/2)), ] < epsilon
bool
bool <- o[ floor(B*(1-alpha/2)), ] < epsilon
bool
o
bool <- o[ floor(B*(1-alpha/2)), ]
bool
o
bootdist
?order
o <- apply(bootdist, 2, order)
o
o <- apply(bootdist, 2, order)
dim(o)
bootdist <- bootdist[o]
bootdist
head(bootdist)
bootdist[1:10,]
?order
?sort
o <- apply(bootdist, 2, sort)
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	}
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	}
ordered <- apply(bootdist, 2, sort)
bool <- ordered[,(1-alpha/2)*B]
bool <- ordered[(1-alpha/2)*B,]
bool
bool <- ordered[(1-alpha/2)*B,]	< epsilon
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	}#
ordered <- apply(bootdist, 2, sort)#
bool <- ordered[(1-alpha/2)*B,]	< epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 10000#
k <- 1000#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:(k-1) )#
{ #
	E[i] <- epsilon + i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, epsilon + i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	yprime <- sample(y, n, replace = TRUE)#
	bootdist[i,] <- abs(xprime - yprime)#
	}
bootdist
ordered <- apply(bootdist, 2, sort)
ordered
ordered[(1-alpha/2)*B,]
ordered[(alpha/2)*B,]
bool <- ordered[(alpha/2)*B,]	< epsilon
bool
bool <- ordered[(alpha/2)*B,]	< epsilon
bool
bool <- ordered[(1-alpha/2)*B,]	< epsilon
bool
x <- rnorm(n)#
y <- rnorm(n, D)
xprime <- x#
bool <- matrix(NA, B, n)#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bool[i,] <- abs(xprime - y) < epsilon#
	}
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bootdist[i,] <- xprime - y#
	}#
ordered <- apply(bootdist, 2, sort)#
bool <- ordered[(1-alpha/2)*B,]	< epsilon
bool
#
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bootdist[i,] <- xprime - y#
	}#
ordered <- apply(bootdist, 2, sort)#
bool <- ordered[(1-alpha/2)*B,]	< epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 1000#
k <- 800#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:(k-1) )#
{ #
	E[i] <- epsilon + i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, epsilon + i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
xprime <- x#
bool <- matrix(NA, B, n)#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bool[i,] <- abs(xprime - y) < epsilon#
	}#
p <- apply(bool, 2, sum, na.rm = TRUE)	/B#
powerB <- sum(p > 1 - alpha/2)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}#
#
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 10000#
k <- 1000#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:k)#
{ #
	E[i] <- i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )#
#
getwd()#
 dev.copy(pdf, "PowerEpsilon.pdf")#
 dev.off()
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bootdist[i,] <- xprime - y#
	}#
ordered <- apply(bootdist, 2, sort)#
bool <- ordered[(1-alpha/2)*B,]	< epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}#
#
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 1000#
k <- 800#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:(k-1) )#
{ #
	E[i] <- epsilon + i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, epsilon + i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bootdist[i,] <- xprime - y#
	}#
ordered <- apply(bootdist, 2, sort)#
bool <- ordered[(1-alpha/2)*B,]	< epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}#
#
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 1000#
k <- 800#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:(k-1) )#
{ #
	E[i] <- epsilon + i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, epsilon + i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )#
#
getwd()#
 dev.copy(pdf, "PowerEpsilonPerc.pdf")#
 dev.off()
#
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
xprime <- x#
bool <- matrix(NA, B, n)#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bool[i,] <- abs(xprime - y) < epsilon#
	}#
p <- apply(bool, 2, sum, na.rm = TRUE)	/B#
powerB <- sum(p > 1 - alpha/2)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}#
#
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 1000#
k <- 1000#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:k)#
{ #
	E[i] <- i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )#
#
getwd()#
 dev.copy(pdf, "PowerEpsilon.pdf")#
 dev.off()
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bootdist[i,] <- xprime - y#
	}#
ordered <- apply(bootdist, 2, sort)#
bool <- ordered[(1-alpha/2)*B,]	< epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}#
#
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 1000#
k <- 800#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:(k-1) )#
{ #
	E[i] <- epsilon + i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, epsilon + i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )#
#
getwd()#
 dev.copy(pdf, "PowerEpsilonPerc.pdf")#
 dev.off()
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bootdist[i,] <- xprime - y#
	}#
ordered <- apply(bootdist, 2, sort)#
bool <- ordered[(1-alpha/2)*B,]	< epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}#
#
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 10000#
k <- 1000#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:(k-1) )#
{ #
	E[i] <- epsilon + i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, epsilon + i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )#
#
getwd()#
 dev.copy(pdf, "PowerEpsilonPerc.pdf")#
 dev.off()
p0
p.0
ls()
po
p0
#
p.25 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  p.25[n,] <- toePower(n+5, d = 0.25, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
p.5 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  p.5[n,] <- toePower(n+5, d = 0.5, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
p.75 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  p.75[n,] <- toePower(n+5, d = 0.75, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
p1 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  p1[n,] <- toePower(n+5, d = 1, Reps = 100, eps = 1, alpha = 0.05, B = 10000)
p1
p.75
p0
p.25
#
#
toePowerT <- function(n, d=0, Reps=10, eps=1, alpha=.05, B=10000)#
{#
Result <- cbind( rep(FALSE, Reps), rep(FALSE, Reps))#
#
for(i in 1:Reps)#
 {#
 	x <- rt(n,6)#
	y <- rt(n,6) + d#
	Result[i,1] = toeBoot(x, y, eps, alpha, B)#
	Result[i,2] = toeTOST(x,y,eps,alpha)#
}	#
	pB <- sum(Result[,1])/Reps#
	pT <- sum(Result[,2])/Reps#
	BTpower <- cbind(pB, pT)#
	colnames(BTpower) <- c("Bootstrap", "TOST")#
	BTpower#
}#
#
q.0 <- cbind(numeric(50),numeric(50) )#
for(n in 1:50)  q[n,] <- toePowerT(n+5, d = 0, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
#
q.25 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  q.25[n,] <- toePowerT(n+5, d = 0.25, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
q.5 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  q.5[n,] <- toePowerT(n+5, d = 0.5, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
q.75 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  q.75[n,] <- toePowerT(n+5, d = 0.75, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
q1 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  q1[n,] <- toePowerT(n+5, d = 1, Reps = 100, eps = 1, alpha = 0.05, B = 10000)
#
q.0 <- cbind(numeric(50),numeric(50) )#
for(n in 1:50)  q.0[n,] <- toePowerT(n+5, d = 0, Reps = 100, eps = 1, alpha = 0.05, B = 10000)
p1
q1
plot(rep(1:50, 10), c(p0[,1],p0[,2], p.25[,1],p.25[,2], p.5[,1],p.5[,2], p.75[,1],p.75[,2], p1[,1],p1[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")
#
plot(c(1:50,1:50), c(p0[,1],p0[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")
#
plot(c(1:50,1:50), c(p.25[,1],p.25[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")
#
plot(c(1:50,1:50), c(p.25[,1],p.25[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
plot(c(1:50,1:50), c(p0[,1],p0[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
plot(c(6:55,6:55), c(p0[,1],p0[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
plot(c(6:55,6:55), c(p0[,1],p0[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 6, y = .2, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
plot(c(6:55,6:55), c(p0[,1],p0[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 20, y = .2, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
plot(c(6:55,6:55), c(p.25[,1],p.25[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 20, y = .2, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
plot(c(6:55,6:55), c(p.5[,1],p.5[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 20, y = .2, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
plot(c(6:55,6:55), c(p.75[,1],p.75[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 20, y = .2, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
x <- rnorm(n, sd = 1)#
y <- rnorm(n, sd = 1)
se <- sqrt( ( SSQ(x)+SSQ(y) ) / dft  ) * sqrt( (1/ (dfx+1)) + (1/(dfy+1)) )
mx <- mean(x)#
my <- mean(y)#
dfx <- length(x)-1#
dfy <- length(y)-1#
dft <- dfx+dfy#
se <- sqrt( ( SSQ(x)+SSQ(y) ) / dft  ) * sqrt( (1/ (dfx+1)) + (1/(dfy+1)) )
mx <- mean(x)#
my <- mean(y)#
dfx <- length(x)-1#
dfy <- length(y)-1#
dft <- dfx+dfy#
se <- sqrt( (SSQ(x)+SSQ(y) ) / dft  ) * sqrt( 1/ (dfx+1) + 1/(dfy+1) )
se
mx <- mean(x)#
my <- mean(y)#
dfx <- length(x)-1#
dfy <- length(y)-1#
dft <- dfx+dfy#
se <- sqrt( ( SSQ(x)+SSQ(y) ) / dft  ) * sqrt( (1/ (dfx+1)) + (1/(dfy+1)) )
se
se <- sqrt( ( SSQ(x)+SSQ(y) ) / dft  ) * sqrt( (1/ (dfx+1)) + (1/(dfy+1)) )
se
x <- rnorm(100,1,1)
plot(x)
y <- 1:10000/10000
y
plot(x,y)
length(x)
x <- rnorm(10000,1,1)
x
plot(x,y)
hist(x,y)
hist(x)
?hist
hist(x, breaks = 10000)
hist(x, breaks = 1000)
hist(x, breaks = 100)
x
x <- rnorm(10000,1,1)
x <- rnorm(1000000,1,1)
hist(x, breaks = 100)
?choose
choose(20000,10000)
choose(100,50)
log(1.5,2
)
#
#
SSQ <- function(x) sum( (x-mean(x))^2)#
#
toePower <- function(n, d=0, Reps=10, eps=1, alpha=.05, B=10000)#
{#
Result <- cbind( rep(FALSE, Reps), rep(FALSE, Reps))#
#
x <- array(rnorm(n*Reps), dim = c(n, Reps) )#
y <- array(rnorm(n*Reps) + d, dim = c(n, Reps) )#
#
#Both tests reject if the difference in means is larger than epsilon#
diffmean <- apply(x, mean, 2) - apply(y, mean, 2)#
#
#The bootstrap#
nx <- dim(x)[2]#
ny <- dim(y)[2]#
bx <- array( apply(x, 2, sample, size = B*nx, replace = TRUE), dim = c(nx, Reps, B) )#
by <- array(apply(y, 2, sample, size = B*ny, replace = TRUE), dim = c(ny, Reps, B) )#
Ex <- apply(bx[,i], margin = 1, mean)#
Ey <- apply(by[,i], margin = 1, mean)#
Delta <- Ex - Ey#
Delta <- apply(Delta, 1, sort)#
n1 <- round(B*(alpha/2))#
n2 <- round(B*(1-alpha/2))	#
Result[,1] = (Delta[n1,] > -eps) & (Delta[n2,] < eps)#
#
#The TOST of equivalence#
mx <- mean(x)#
my <- mean(y)#
dfx <- nx-1#
dfy <- ny-1#
dft <- dfx+dfy#
se <- ( sqrt( apply(x, 2, SSQ) + apply(y, 2, SSQ) ) / dft ) * sqrt( (1/ (dfx+1)) + (1/(dfy+1)) )#
Qt <- qt(1-alpha/2,dft)#
#
Result[,2] <- eps > diffmean + Qt * se  #
#
#If the difference in means is greater than epsilon, we can't reject the null.#
Result[abs(diffmean) > eps, ] <- FALSE#
#
#
#Proportion of rejected nulls out of total.#
	pB <- sum(Result[,1])/Reps#
	pT <- sum(Result[,2])/Reps#
	BTpower <- cbind(pB, pT)#
	colnames(BTpower) <- c("Bootstrap", "TOST")#
	BTpower#
}
toePower(30, reps = 1000, B = 1000)
toePower(n == 30, Reps = 1000, B = 1000)
n
#
SSQ <- function(x) sum( (x-mean(x))^2)#
#
toePower <- function(n, d=0, Reps=10, eps=1, alpha=.05, B=10000)#
{#
Result <- cbind( rep(FALSE, Reps), rep(FALSE, Reps))#
#
x <- array(rnorm(n*Reps), dim = c(n, Reps) )#
y <- array(rnorm(n*Reps) + d, dim = c(n, Reps) )#
#
#Both tests reject if the difference in means is larger than epsilon#
diffmean <- apply(x, mean, 2) - apply(y, mean, 2)#
#
#The bootstrap#
nx <- dim(x)[2]#
ny <- dim(y)[2]#
bx <- array( apply(x, 2, sample, size = B*nx, replace = TRUE), dim = c(nx, Reps, B) )#
by <- array(apply(y, 2, sample, size = B*ny, replace = TRUE), dim = c(ny, Reps, B) )#
Ex <- apply(bx[,i], margin = 1, mean)#
Ey <- apply(by[,i], margin = 1, mean)#
Delta <- Ex - Ey#
Delta <- apply(Delta, 1, sort)#
n1 <- round(B*(alpha/2))#
n2 <- round(B*(1-alpha/2))	#
Result[,1] = (Delta[n1,] > -eps) & (Delta[n2,] < eps)#
#
#The TOST of equivalence#
mx <- mean(x)#
my <- mean(y)#
dfx <- nx-1#
dfy <- ny-1#
dft <- dfx+dfy#
se <- ( sqrt( apply(x, 2, SSQ) + apply(y, 2, SSQ) ) / dft ) * sqrt( (1/ (dfx+1)) + (1/(dfy+1)) )#
Qt <- qt(1-alpha/2,dft)#
#
Result[,2] <- eps > diffmean + Qt * se  #
#
#If the difference in means is greater than epsilon, we can't reject the null.#
Result[abs(diffmean) > eps, ] <- FALSE#
#
#
#Proportion of rejected nulls out of total.#
	pB <- sum(Result[,1])/Reps#
	pT <- sum(Result[,2])/Reps#
	BTpower <- cbind(pB, pT)#
	colnames(BTpower) <- c("Bootstrap", "TOST")#
	BTpower#
}
toePower(n = 30, Reps = 1000, B = 1000)
#
#
SSQ <- function(x) sum( (x-mean(x))^2)#
#
toePower <- function(n, d=0, Reps=10, eps=1, alpha=.05, B=10000)#
{#
Result <- cbind( rep(FALSE, Reps), rep(FALSE, Reps))#
#
x <- array(rnorm(n*Reps), dim = c(n, Reps) )#
y <- array(rnorm(n*Reps) + d, dim = c(n, Reps) )#
#
#Both tests reject if the difference in means is larger than epsilon#
diffmean <- apply(x,  2, mean) - apply(y, 2, mean)#
#
#The bootstrap#
nx <- dim(x)[2]#
ny <- dim(y)[2]#
bx <- array( apply(x, 2, sample, size = B*nx, replace = TRUE), dim = c(nx, Reps, B) )#
by <- array(apply(y, 2, sample, size = B*ny, replace = TRUE), dim = c(ny, Reps, B) )#
Ex <- apply(bx[,i], margin = 1, mean)#
Ey <- apply(by[,i], margin = 1, mean)#
Delta <- Ex - Ey#
Delta <- apply(Delta, 1, sort)#
n1 <- round(B*(alpha/2))#
n2 <- round(B*(1-alpha/2))	#
Result[,1] = (Delta[n1,] > -eps) & (Delta[n2,] < eps)#
#
#The TOST of equivalence#
mx <- mean(x)#
my <- mean(y)#
dfx <- nx-1#
dfy <- ny-1#
dft <- dfx+dfy#
se <- ( sqrt( apply(x, 2, SSQ) + apply(y, 2, SSQ) ) / dft ) * sqrt( (1/ (dfx+1)) + (1/(dfy+1)) )#
Qt <- qt(1-alpha/2,dft)#
#
Result[,2] <- eps > diffmean + Qt * se  #
#
#If the difference in means is greater than epsilon, we can't reject the null.#
Result[abs(diffmean) > eps, ] <- FALSE#
#
#
#Proportion of rejected nulls out of total.#
	pB <- sum(Result[,1])/Reps#
	pT <- sum(Result[,2])/Reps#
	BTpower <- cbind(pB, pT)#
	colnames(BTpower) <- c("Bootstrap", "TOST")#
	BTpower#
}
toePower(n = 30, Reps = 1000, B = 1000)
1/2 + 1/3 + 1/5 + 1/7
1/2 + 1/3 + 1/5
1/2 + 1/3 + 1/5 + 1/7 +1/11 + 1/13 +1/17 + 1/19
1/2 + 1/3 + 1/5 + 1/7 +1/11 + 1/13 +1/17 + 1/19 + 1/23 + 1/ 29 + 1/ 31 + 1/ 37 + 1/41
41
41/7
41/4
41/3
41/9
?dbinom
pbinom(8,10,.5)
dbinom(8,10,.5)
pbinom(8,10,.5, lower.tail = FALSE)
load("/Users/andrewwinterman/Documents/Fall 2010/Test of Equivalence/Paper/Thesis/Figures/PowerEpsilon.RData")
load("/Users/andrewwinterman/Documents/Fall 2010/Test of Equivalence/Paper/Thesis/Figures/PowerEpsilon.RData")
#
plot(6:45, p0[,1], type = "o",col =  "firebrick", cex = .7, pch = 1, main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
lines(x = 6:45, y = p0[,2], col= "red", type = "o" , cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.25[,1], col = "purple", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.25[,2], col = "violet", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.5[,1], col = "darkgreen", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.5[,2], col = "green", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.75[,1], col = "black", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.75[,2], col = "dimgrey", type ="o", cex = .65, pch = 3)#
#
#
legend( x = 6, y = 1, legend = c( c(expression( paste("Bootstrap, ", Delta, " = 0") )), c(expression( paste("TOST, ", Delta, " = 0") )), c(expression( paste("Bootstrap, ", Delta, " = 0.25") )), c(expression( paste("TOST, ", Delta, " = 0.25") )), #
c(expression( paste("Bootstrap, ", Delta, " = 0.5") )), c(expression( paste("TOST, ", Delta, " = 0.5") )), c(expression( paste("Bootstrap, ", Delta, " = 0.75") )), c(expression( paste("TOST, ", Delta, " = 0.75") ))  ), col = c("firebrick", "red", "purple", "violet", "darkgreen", "green","black","dimgrey"), pch = c(1, 3), cex = .65  )
?plot
#
#
plot(6:45, p0[,1], type = "o",col =  "firebrick", cex = .7, pch = 1, main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power", ylim = c(0,1))#
#
lines(x = 6:45, y = p0[,2], col= "red", type = "o" , cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.25[,1], col = "purple", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.25[,2], col = "violet", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.5[,1], col = "darkgreen", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.5[,2], col = "green", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.75[,1], col = "black", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.75[,2], col = "dimgrey", type ="o", cex = .65, pch = 3)
#
#
legend( x = 6, y = 1, legend = c( c(expression( paste("Bootstrap, ", Delta, " = 0") )), c(expression( paste("TOST, ", Delta, " = 0") )), c(expression( paste("Bootstrap, ", Delta, " = 0.25") )), c(expression( paste("TOST, ", Delta, " = 0.25") )), #
c(expression( paste("Bootstrap, ", Delta, " = 0.5") )), c(expression( paste("TOST, ", Delta, " = 0.5") )), c(expression( paste("Bootstrap, ", Delta, " = 0.75") )), c(expression( paste("TOST, ", Delta, " = 0.75") ))  ), col = c("firebrick", "red", "purple", "violet", "darkgreen", "green","black","dimgrey"), pch = c(1, 3), cex = .65  )
getwd()
cd(documents)
?cd
??cd
getwd()
getwd()
#
#
plot(6:45, p0[,1], type = "o",col =  "firebrick", cex = .7, pch = 1, main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power", ylim = c(0,1))#
#
lines(x = 6:45, y = p0[,2], col= "red", type = "o" , cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.25[,1], col = "purple", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.25[,2], col = "violet", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.5[,1], col = "darkgreen", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.5[,2], col = "green", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.75[,1], col = "black", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.75[,2], col = "dimgrey", type ="o", cex = .65, pch = 3)
#
#
legend( x = 6, y = 1, legend = c( c(expression( paste("Bootstrap, ", Delta, " = 0") )), c(expression( paste("TOST, ", Delta, " = 0") )), c(expression( paste("Bootstrap, ", Delta, " = 0.25") )), c(expression( paste("TOST, ", Delta, " = 0.25") )), #
c(expression( paste("Bootstrap, ", Delta, " = 0.5") )), c(expression( paste("TOST, ", Delta, " = 0.5") )), c(expression( paste("Bootstrap, ", Delta, " = 0.75") )), c(expression( paste("TOST, ", Delta, " = 0.75") ))  ), col = c("firebrick", "red", "purple", "violet", "darkgreen", "green","black","dimgrey"), pch = c(1, 3), cex = .65  )
 dev.copy(pdf, "NormalPowerEpsilon.pdf")#
 dev.off()
legend( x = 6, y = 1, legend = c( c(expression( paste("Bootstrap, ", Delta, " = 0") )), c(expression( paste("t-test, ", Delta, " = 0") )), c(expression( paste("Bootstrap, ", Delta, " = 0.25") )), c(expression( paste("t-test, ", Delta, " = 0.25") )), #
c(expression( paste("Bootstrap, ", Delta, " = 0.5") )), c(expression( paste("t-test, ", Delta, " = 0.5") )), c(expression( paste("Bootstrap, ", Delta, " = 0.75") )), c(expression( paste("t-test, ", Delta, " = 0.75") ))  ), col = c("firebrick", "red", "purple", "violet", "darkgreen", "green","black","dimgrey"), pch = c(1, 3), cex = .65  )
getwd()#
 dev.copy(pdf, "NormalPowerEpsilon.pdf")#
 dev.off()
#
#
plot(6:45, p0[,1], type = "o",col =  "firebrick", cex = .7, pch = 1, main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power", ylim = c(0,1))#
#
lines(x = 6:45, y = p0[,2], col= "red", type = "o" , cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.25[,1], col = "purple", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.25[,2], col = "violet", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.5[,1], col = "darkgreen", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.5[,2], col = "green", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.75[,1], col = "black", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.75[,2], col = "dimgrey", type ="o", cex = .65, pch = 3)#
#
#
legend( x = 6, y = 1, legend = c( c(expression( paste("Bootstrap, ", Delta, " = 0") )), c(expression( paste("t-test, ", Delta, " = 0") )), c(expression( paste("Bootstrap, ", Delta, " = 0.25") )), c(expression( paste("t-test, ", Delta, " = 0.25") )), #
c(expression( paste("Bootstrap, ", Delta, " = 0.5") )), c(expression( paste("t-test, ", Delta, " = 0.5") )), c(expression( paste("Bootstrap, ", Delta, " = 0.75") )), c(expression( paste("t-test, ", Delta, " = 0.75") ))  ), col = c("firebrick", "red", "purple", "violet", "darkgreen", "green","black","dimgrey"), pch = c(1, 3), cex = .65  )
#
plot(6:45, p0[,1], type = "o",col =  "firebrick", cex = .7, pch = 1, main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power", ylim = c(0,1))#
#
lines(x = 6:45, y = p0[,2], col= "red", type = "o" , cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.25[,1], col = "purple", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.25[,2], col = "violet", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.5[,1], col = "darkgreen", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.5[,2], col = "green", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.75[,1], col = "black", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.75[,2], col = "dimgrey", type ="o", cex = .65, pch = 3)#
#
#
legend( x = 6, y = 1, legend = c( c(expression( paste("Bootstrap, ", Delta, " = 0") )), c(expression( paste("t test, ", Delta, " = 0") )), c(expression( paste("Bootstrap, ", Delta, " = 0.25") )), c(expression( paste("t test, ", Delta, " = 0.25") )), #
c(expression( paste("Bootstrap, ", Delta, " = 0.5") )), c(expression( paste("t test, ", Delta, " = 0.5") )), c(expression( paste("Bootstrap, ", Delta, " = 0.75") )), c(expression( paste("t test, ", Delta, " = 0.75") ))  ), col = c("firebrick", "red", "purple", "violet", "darkgreen", "green","black","dimgrey"), pch = c(1, 3), cex = .65  )
 dev.copy(pdf, "NormalPowerEpsilon.pdf")#
 dev.off()
#
#
plot(6:45, q0[,1], type = "o",col =  "firebrick", cex = .7, pch = 1, main = "Student's t data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power", ylim = c(0,1))#
#
lines(x = 6:45, y = q0[,2], col= "red", type = "o" , cex = .7, pch = 3)#
#
lines(x = 6:45, y = q.25[,1], col = "purple", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = q.25[,2], col = "violet", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = q.5[,1], col = "darkgreen", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = q.5[,2], col = "green", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = q.75[,1], col = "black", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = q.75[,2], col = "dimgrey", type ="o", cex = .65, pch = 3)#
#
#
legend( x = 6, y = 1, legend = c( c(expression( paste("Bootstrap, ", Delta, " = 0") )), c(expression( paste("TOST, ", Delta, " = 0") )), c(expression( paste("Bootstrap, ", Delta, " = 0.25") )), c(expression( paste("TOST, ", Delta, " = 0.25") )), #
c(expression( paste("Bootstrap, ", Delta, " = 0.5") )), c(expression( paste("TOST, ", Delta, " = 0.5") )), c(expression( paste("Bootstrap, ", Delta, " = 0.75") )), c(expression( paste("TOST, ", Delta, " = 0.75") ))  ), col = c("firebrick", "red", "purple", "violet", "darkgreen", "green","black","dimgrey"), pch = c(1, 3), cex = .65  )#
#
#
getwd()#
 dev.copy(pdf, "Student'sTPowerEpsilon.pdf")#
 dev.off()
#
#
plot(6:45, q0[,1], type = "o",col =  "firebrick", cex = .7, pch = 1, main = "Student's t data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power", ylim = c(0,1))#
#
lines(x = 6:45, y = q0[,2], col= "red", type = "o" , cex = .7, pch = 3)#
#
lines(x = 6:45, y = q.25[,1], col = "purple", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = q.25[,2], col = "violet", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = q.5[,1], col = "darkgreen", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = q.5[,2], col = "green", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = q.75[,1], col = "black", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = q.75[,2], col = "dimgrey", type ="o", cex = .65, pch = 3)#
#
#
legend( x = 6, y = 1, legend = c( c(expression( paste("Bootstrap, ", Delta, " = 0") )), c(expression( paste("t test, ", Delta, " = 0") )), c(expression( paste("Bootstrap, ", Delta, " = 0.25") )), c(expression( paste("t test, ", Delta, " = 0.25") )), #
c(expression( paste("Bootstrap, ", Delta, " = 0.5") )), c(expression( paste("t test, ", Delta, " = 0.5") )), c(expression( paste("Bootstrap, ", Delta, " = 0.75") )), c(expression( paste("t test, ", Delta, " = 0.75") ))  ), col = c("firebrick", "red", "purple", "violet", "darkgreen", "green","black","dimgrey"), pch = c(1, 3), cex = .65  )
getwd()#
 dev.copy(pdf, "Student'sTPowerEpsilon.pdf")#
 dev.off()
#
#
plot(6:45, q0[,1], type = "o",col =  "firebrick", cex = .7, pch = 1, main = "Student's t data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power", ylim = c(0,1))#
#
lines(x = 6:45, y = q0[,2], col= "red", type = "o" , cex = .7, pch = 3)#
#
lines(x = 6:45, y = q.25[,1], col = "purple", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = q.25[,2], col = "violet", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = q.5[,1], col = "darkgreen", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = q.5[,2], col = "green", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = q.75[,1], col = "black", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = q.75[,2], col = "dimgrey", type ="o", cex = .65, pch = 3)#
#
#
legend( x = 6, y = 1, legend = c( c(expression( paste("Bootstrap, ", Delta, " = 0") )), c(expression( paste("t test, ", Delta, " = 0") )), c(expression( paste("Bootstrap, ", Delta, " = 0.25") )), c(expression( paste("t test, ", Delta, " = 0.25") )), #
c(expression( paste("Bootstrap, ", Delta, " = 0.5") )), c(expression( paste("t test, ", Delta, " = 0.5") )), c(expression( paste("Bootstrap, ", Delta, " = 0.75") )), c(expression( paste("t test, ", Delta, " = 0.75") ))  ), col = c("firebrick", "red", "purple", "violet", "darkgreen", "green","black","dimgrey"), pch = c(1, 3), cex = .65  )
#
getwd()#
 dev.copy(pdf, "Student'sTPowerEpsilon.pdf")#
 dev.off()
#
#
plot(6:45, p0[,1], type = "o",col =  "firebrick", cex = .7, pch = 1, main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power", ylim = c(0,1))#
#
lines(x = 6:45, y = p0[,2], col= "red", type = "o" , cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.25[,1], col = "purple", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.25[,2], col = "violet", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.5[,1], col = "darkgreen", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.5[,2], col = "green", type ="o", cex = .7, pch = 3)#
#
lines(x = 6:45, y = p.75[,1], col = "black", type ="o", cex = .7, pch = 1)#
#
lines(x = 6:45, y = p.75[,2], col = "dimgrey", type ="o", cex = .65, pch = 3)#
#
#
legend( x = 6, y = 1, legend = c( c(expression( paste("Bootstrap, ", Delta, " = 0") )), c(expression( paste("t test, ", Delta, " = 0") )), c(expression( paste("Bootstrap, ", Delta, " = 0.25") )), c(expression( paste("t test, ", Delta, " = 0.25") )), #
c(expression( paste("Bootstrap, ", Delta, " = 0.5") )), c(expression( paste("t test, ", Delta, " = 0.5") )), c(expression( paste("Bootstrap, ", Delta, " = 0.75") )), c(expression( paste("t test, ", Delta, " = 0.75") ))  ), col = c("firebrick", "red", "purple", "violet", "darkgreen", "green","black","dimgrey"), pch = c(1, 3), cex = .65  )#
#
getwd()#
 dev.copy(pdf, "NormalPowerEpsilon.pdf")#
 dev.off()
