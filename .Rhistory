bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bootdist[i,] <- xprime - y#
	}#
ordered <- apply(bootdist, 2, sort)#
bool <- ordered[(1-alpha/2)*B,]	< epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 1000#
k <- 800#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:(k-1) )#
{ #
	E[i] <- epsilon + i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, epsilon + i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
xprime <- x#
bool <- matrix(NA, B, n)#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bool[i,] <- abs(xprime - y) < epsilon#
	}#
p <- apply(bool, 2, sum, na.rm = TRUE)	/B#
powerB <- sum(p > 1 - alpha/2)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}#
#
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 10000#
k <- 1000#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:k)#
{ #
	E[i] <- i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )#
#
getwd()#
 dev.copy(pdf, "PowerEpsilon.pdf")#
 dev.off()
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bootdist[i,] <- xprime - y#
	}#
ordered <- apply(bootdist, 2, sort)#
bool <- ordered[(1-alpha/2)*B,]	< epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}#
#
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 1000#
k <- 800#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:(k-1) )#
{ #
	E[i] <- epsilon + i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, epsilon + i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bootdist[i,] <- xprime - y#
	}#
ordered <- apply(bootdist, 2, sort)#
bool <- ordered[(1-alpha/2)*B,]	< epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}#
#
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 1000#
k <- 800#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:(k-1) )#
{ #
	E[i] <- epsilon + i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, epsilon + i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )#
#
getwd()#
 dev.copy(pdf, "PowerEpsilonPerc.pdf")#
 dev.off()
#
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
xprime <- x#
bool <- matrix(NA, B, n)#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bool[i,] <- abs(xprime - y) < epsilon#
	}#
p <- apply(bool, 2, sum, na.rm = TRUE)	/B#
powerB <- sum(p > 1 - alpha/2)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}#
#
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 1000#
k <- 1000#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:k)#
{ #
	E[i] <- i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )#
#
getwd()#
 dev.copy(pdf, "PowerEpsilon.pdf")#
 dev.off()
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bootdist[i,] <- xprime - y#
	}#
ordered <- apply(bootdist, 2, sort)#
bool <- ordered[(1-alpha/2)*B,]	< epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}#
#
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 1000#
k <- 800#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:(k-1) )#
{ #
	E[i] <- epsilon + i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, epsilon + i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )#
#
getwd()#
 dev.copy(pdf, "PowerEpsilonPerc.pdf")#
 dev.off()
PowerTB<- function(D, n, B, alpha, epsilon)#
{ #
x <- rnorm(n)#
y <- rnorm(n, D)#
bootdist <- matrix(NA, B, n)#
o <- bootdist#
#
for(i in 1:B) #
	{#
	xprime <- sample(x, n, replace = TRUE)#
	bootdist[i,] <- xprime - y#
	}#
ordered <- apply(bootdist, 2, sort)#
bool <- ordered[(1-alpha/2)*B,]	< epsilon#
powerB <- sum(bool)/n#
#
#
TOST <- abs(x-y) + qt(1 - alpha/2, df = n-2)*sd(x-y)/sqrt(n) < epsilon#
powerT <- sum(TOST)/n#
#
X <- cbind(as.matrix(powerB), as.matrix(powerT))#
colnames(X) <- c("Bootstrap", "TOST")#
#
X#
}#
#
#
#
D <- 0#
n <- 500#
alpha <- .05#
epsilon <- 1#
B <- 10000#
k <- 1000#
q <- 250#
	#
Test <- matrix(NA, k, 2)#
E <- rep(NA,k)#
for(i in 0:(k-1) )#
{ #
	E[i] <- epsilon + i/q#
	Test[i,] <- PowerTB(D, n, B, alpha, epsilon + i/q)#
	#
}	#
	#
plot(c(E,E), c(Test[,1],Test[,2]),, col =  #
c( rep("red", length(E)), rep("blue", length(E))), cex = .5, pch = c( rep(16, length(E)), rep(15, length(E))), main = "Normal Data: Power vs. Epsilon", xlab = "Epsilon", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )#
#
getwd()#
 dev.copy(pdf, "PowerEpsilonPerc.pdf")#
 dev.off()
p0
p.0
ls()
po
p0
#
p.25 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  p.25[n,] <- toePower(n+5, d = 0.25, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
p.5 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  p.5[n,] <- toePower(n+5, d = 0.5, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
p.75 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  p.75[n,] <- toePower(n+5, d = 0.75, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
p1 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  p1[n,] <- toePower(n+5, d = 1, Reps = 100, eps = 1, alpha = 0.05, B = 10000)
p1
p.75
p0
p.25
#
#
toePowerT <- function(n, d=0, Reps=10, eps=1, alpha=.05, B=10000)#
{#
Result <- cbind( rep(FALSE, Reps), rep(FALSE, Reps))#
#
for(i in 1:Reps)#
 {#
 	x <- rt(n,6)#
	y <- rt(n,6) + d#
	Result[i,1] = toeBoot(x, y, eps, alpha, B)#
	Result[i,2] = toeTOST(x,y,eps,alpha)#
}	#
	pB <- sum(Result[,1])/Reps#
	pT <- sum(Result[,2])/Reps#
	BTpower <- cbind(pB, pT)#
	colnames(BTpower) <- c("Bootstrap", "TOST")#
	BTpower#
}#
#
q.0 <- cbind(numeric(50),numeric(50) )#
for(n in 1:50)  q[n,] <- toePowerT(n+5, d = 0, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
#
q.25 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  q.25[n,] <- toePowerT(n+5, d = 0.25, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
q.5 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  q.5[n,] <- toePowerT(n+5, d = 0.5, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
q.75 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  q.75[n,] <- toePowerT(n+5, d = 0.75, Reps = 100, eps = 1, alpha = 0.05, B = 10000)#
#
q1 <- cbind(numeric(50), numeric(50) )#
for(n in 1:50)  q1[n,] <- toePowerT(n+5, d = 1, Reps = 100, eps = 1, alpha = 0.05, B = 10000)
#
q.0 <- cbind(numeric(50),numeric(50) )#
for(n in 1:50)  q.0[n,] <- toePowerT(n+5, d = 0, Reps = 100, eps = 1, alpha = 0.05, B = 10000)
p1
q1
plot(rep(1:50, 10), c(p0[,1],p0[,2], p.25[,1],p.25[,2], p.5[,1],p.5[,2], p.75[,1],p.75[,2], p1[,1],p1[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")
#
plot(c(1:50,1:50), c(p0[,1],p0[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")
#
plot(c(1:50,1:50), c(p.25[,1],p.25[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")
#
plot(c(1:50,1:50), c(p.25[,1],p.25[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
plot(c(1:50,1:50), c(p0[,1],p0[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
plot(c(6:55,6:55), c(p0[,1],p0[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 1, y = 1, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
plot(c(6:55,6:55), c(p0[,1],p0[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 6, y = .2, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
plot(c(6:55,6:55), c(p0[,1],p0[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 20, y = .2, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
plot(c(6:55,6:55), c(p.25[,1],p.25[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 20, y = .2, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
plot(c(6:55,6:55), c(p.5[,1],p.5[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 20, y = .2, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
#
plot(c(6:55,6:55), c(p.75[,1],p.75[,2]), col =  #
c( rep("red", 50), rep("blue", 50) ), cex = .5, pch = c( rep(16, 50), rep(15, 50)), main = "Normal Data: Power vs. Sample Size", xlab = "Sample Size", ylab = "Power")#
#
legend( x = 20, y = .2, legend = c("Bootstrap", "TOST"), col = c("red", "blue"), pch = c(16, 15), cex = 1  )
x <- rnorm(n, sd = 1)#
y <- rnorm(n, sd = 1)
se <- sqrt( ( SSQ(x)+SSQ(y) ) / dft  ) * sqrt( (1/ (dfx+1)) + (1/(dfy+1)) )
mx <- mean(x)#
my <- mean(y)#
dfx <- length(x)-1#
dfy <- length(y)-1#
dft <- dfx+dfy#
se <- sqrt( ( SSQ(x)+SSQ(y) ) / dft  ) * sqrt( (1/ (dfx+1)) + (1/(dfy+1)) )
mx <- mean(x)#
my <- mean(y)#
dfx <- length(x)-1#
dfy <- length(y)-1#
dft <- dfx+dfy#
se <- sqrt( (SSQ(x)+SSQ(y) ) / dft  ) * sqrt( 1/ (dfx+1) + 1/(dfy+1) )
se
mx <- mean(x)#
my <- mean(y)#
dfx <- length(x)-1#
dfy <- length(y)-1#
dft <- dfx+dfy#
se <- sqrt( ( SSQ(x)+SSQ(y) ) / dft  ) * sqrt( (1/ (dfx+1)) + (1/(dfy+1)) )
se
se <- sqrt( ( SSQ(x)+SSQ(y) ) / dft  ) * sqrt( (1/ (dfx+1)) + (1/(dfy+1)) )
se
x <- rnorm(100,1,1)
plot(x)
y <- 1:10000/10000
y
plot(x,y)
length(x)
x <- rnorm(10000,1,1)
x
plot(x,y)
hist(x,y)
hist(x)
?hist
hist(x, breaks = 10000)
hist(x, breaks = 1000)
hist(x, breaks = 100)
x
x <- rnorm(10000,1,1)
x <- rnorm(1000000,1,1)
hist(x, breaks = 100)
?choose
choose(20000,10000)
choose(100,50)
#
date()#
vp.25 <- cbind(numeric(50), numeric(50) )#
for(n in 1:44)  vp.25[n,] <- vtoePower(n+5, d = 0.25, Reps = 1000, eps = 1, alpha = 0.05, B = 10000)#
date()
#
SSQ <- function(x) sum( (x-mean(x))^2)#
#
vtoePower <- function(n, d=0, Reps=10, eps=1, alpha=.05, B=10000)#
{#
Result <- cbind( rep(FALSE, Reps), rep(FALSE, Reps))#
#
x <- array(rnorm(n*Reps), dim = c(n, Reps) )#
y <- array(rnorm(n*Reps) + d, dim = c(n, Reps) )#
#
#Both tests reject if the difference in means is larger than epsilon#
diffmean <- apply(x,  2, mean) - apply(y, 2, mean)#
#
#The bootstrap#
nx <- dim(x)[1]#
ny <- dim(y)[1]#
bx <- array( apply(x, 2, sample, size = B*nx, replace = TRUE), dim = c(nx, B, Reps) ) #The bx[,,1] is all samples from the first column, etc.#
by <- array(apply(y, 2, sample, size = B*ny, replace = TRUE), dim = c(ny, B, Reps) )#
Ex <- apply(bx, c(2,3), mean)#
Ey <- apply(by, c(2,3), mean)#
Delta <- Ex - Ey#
Delta <- apply(Delta, 2, sort)#
n1 <- ceiling(B*(alpha/2))#
n2 <- ceiling(B*(1-alpha/2))	#
Result[,1] <- (Delta[n1,] > -eps) & (Delta[n2,] < eps)#
#
#The TOST of equivalence#
mx <- mean(x)#
my <- mean(y)#
dfx <- nx-1#
dfy <- ny-1#
dft <- dfx+dfy#
se <- ( sqrt( apply(x, 2, SSQ) + apply(y, 2, SSQ) ) / dft ) * sqrt( (1/ (dfx+1)) + (1/(dfy+1)) )#
Qt <- qt(1-alpha/2,dft)#
#
Result[,2] <- eps > diffmean + Qt * se  #
#
#If the difference in means is greater than epsilon, we can't reject the null.#
Result[abs(diffmean) > eps, ] <- FALSE#
#
#
#Proportion of rejected nulls out of total.#
	pB <- sum(Result[,1])/Reps#
	pT <- sum(Result[,2])/Reps#
	BTpower <- cbind(pB, pT)#
	colnames(BTpower) <- c("Bootstrap", "TOST")#
	BTpower#
}
#
date()#
vp.25 <- cbind(numeric(50), numeric(50) )#
for(n in 1:44)  vp.25[n,] <- vtoePower(n+5, d = 0.25, Reps = 1000, eps = 1, alpha = 0.05, B = 10000)#
date()
vp.25
